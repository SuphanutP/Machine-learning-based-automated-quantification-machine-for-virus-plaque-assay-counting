<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="20.11.1.1">
<procedure name="count_plaque">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Result" base_type="iconic" dimension="0"/>
<par name="Resultk" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Radius" base_type="ctrl" dimension="0"/>
<par name="GridSize" base_type="ctrl" dimension="0"/>
<par name="RadiusS" base_type="ctrl" dimension="0"/>
<par name="RadiusK" base_type="ctrl" dimension="0"/>
<par name="Silhouette" base_type="ctrl" dimension="0"/>
<par name="Diff" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>read_image(ImageMaster, 'C:/Solitech/Web App Plaque/Plaque Assay/WindowsForms Plaque/Setup/Master.tif')</l>
<l>gen_empty_obj(Result)</l>
<l>gen_empty_obj(Resultk)</l>
<c></c>
<l>Modify_ROI(ROI, Diff)</l>
<c></c>
<l>gen_contour_region_xld(ROI, Contours, 'border')</l>
<l>create_shape_model_xld(Contours, 'auto', -0.39, 0.79, 'auto', 'auto', 'ignore_local_polarity', 5, ModelID)</l>
<c></c>
<c>* Matching 03: Get the model contour for transforming it later into the image</c>
<l>get_shape_model_contours (ModelContours, ModelID, 1)</l>
<c>* </c>
<c>* Matching 03: Get the reference position</c>
<l>area_center (ROI, ModelRegionArea, RefRow, RefColumn)</l>
<l>vector_angle_to_rigid (0, 0, 0, RefRow, RefColumn, 0, HomMat2D)</l>
<l>affine_trans_contour_xld (ModelContours, TransContours, HomMat2D)</l>
<c>* </c>
<c>* Matching 03: Display the model contours</c>
<c></c>
<l>Number := 0</l>
<l>NumberU := 0</l>
<l>Numberk := 0</l>
<l>OI := 0</l>
<l>gen_empty_obj(Regionk)</l>
<l>gen_empty_obj(Result)</l>
<l>gen_empty_obj(Object)</l>
<l>decompose3(Image, R, G, B)</l>
<l>trans_from_rgb(R, G, B, L, a, b, 'cielab')</l>
<l>sub_image(G, a, ImageSub, 1, 128)</l>
<c>* </c>
<c>* Matching 03: Find the model</c>
<l>find_shape_model (ImageSub, ModelID, rad(0), rad(360), 0.3, 1, 0.5, 'least_squares', [4,1], 0.75, Row, Column, Angle, Score)</l>
<c>* </c>
<c>* Matching 03: Transform the model contours into the detected positions</c>
<l>* dev_display (ImageSub)</l>
<l>for I := 0 to |Score| - 1 by 1</l>
<c>    </c>
<l>    hom_mat2d_identity (HomMat2D)</l>
<l>    hom_mat2d_rotate (HomMat2D, Angle[I], 0, 0, HomMat2D)</l>
<l>    hom_mat2d_translate (HomMat2D, Row[I], Column[I], HomMat2D)</l>
<l>    affine_trans_contour_xld (ModelContours, TransContours, HomMat2D)</l>
<c>    </c>
<l>    gen_region_contour_xld(TransContours, Region, 'filled')</l>
<l>    smallest_circle(Region, RowD, ColumnD, RadiusD)</l>
<l>    area_center(Region, AreaD, RowD, ColumnD)</l>
<l>  *  gen_circle(CircleD, RowD, ColumnD, RadiusD*0.95)</l>
<l>    gen_circle(CircleD, RowD, ColumnD, RadiusD*0.95)</l>
<l>    reduce_domain(ImageSub, CircleD, ImageReduced)</l>
<c></c>
<l>    mean_image(ImageReduced, Temp, 10, 10)</l>
<l>  *  median_image(ImageReduced, Temp, 'circle', 25, 25)</l>
<l>    threshold(Temp, Virus, 105, 255)</l>
<l>    erosion_circle(Virus, Virus, 10)</l>
<l>    dilation_circle(Virus, Virus, 10)</l>
<l>    connection(Virus, ConnectedRegions)</l>
<l>    fill_up(ConnectedRegions, RegionFillUp)</l>
<l>    opening_circle(RegionFillUp, RegionOpening, 18)</l>
<l>    closing_circle(RegionOpening, RegionClosing, 15)</l>
<l>    select_shape(RegionClosing, SelectedRegions, 'area', 'and', 1000, 999999)</l>
<l>    union1(SelectedRegions, SelectedRegions)</l>
<l>     dilation_circle (SelectedRegions, SelectedRegions, 31)</l>
<l>    reduce_domain(Temp, SelectedRegions, ImageReducedU)</l>
<c>     </c>
<l>    binary_threshold(ImageReducedU, SelectedRegions, 'max_separability', 'light', UsedThreshold)</l>
<l>    connection(SelectedRegions, ConnectedRegions)</l>
<l>    fill_up(ConnectedRegions, RegionFillUp)</l>
<l>    opening_circle(RegionFillUp, RegionOpening, 10)</l>
<l>    closing_circle(RegionOpening, SelectedRegions, 8)</l>
<l>   * opening_circle(RegionFillUp, RegionOpening, 9)</l>
<l>   * closing_circle(RegionOpening, SelectedRegions, 5)</l>
<l>    select_shape(SelectedRegions, SelectedRegions, 'area', 'and', 1, 999999)</l>
<l>    select_shape(SelectedRegions, SelectedRegions2, 'area', 'and', 1, 999999)</l>
<l>    count_obj(SelectedRegions, Number)</l>
<l>endfor</l>
<l>         select_obj(SelectedRegions, ObjectSelected,1)</l>
<l>         area_center(ObjectSelected, Area2, RowSelected, ColumnSelected)</l>
<l>         if (Area2&gt;470000 )</l>
<l>             tuple_gen_const (999, 20, Newtuple)</l>
<l>             gen_circle (Circle, Newtuple, Newtuple, Newtuple)</l>
<l>              concat_obj (Result, Circle, Result)</l>
<l>              count_obj(Result, Number)</l>
<l>              gen_empty_obj(Resultk)</l>
<l>              return()</l>
<l>         endif</l>
<c></c>
<c></c>
<l>    for Index1 := 1 to Number by 1</l>
<l>        select_obj(SelectedRegions, ObjectSelected, Index1)</l>
<l>        smallest_circle(ObjectSelected, Row2, Column2, RadiusU)</l>
<l>        area_center(ObjectSelected, Area, RowSelected, ColumnSelected)</l>
<l>        if(RadiusU &lt; Radius)</l>
<l>            if(RadiusU &lt; 50)</l>
<l>                gen_circle(Circle, RowSelected, ColumnSelected, RadiusU*1.8)</l>
<l>            else</l>
<l>                gen_circle(Circle, RowSelected, ColumnSelected, RadiusU*0.9)</l>
<l>            endif  </l>
<l>            concat_obj (Result, Circle, Result)</l>
<l>            count_obj(Result, NumberU)</l>
<l>        else</l>
<l>            OI := OI + 1</l>
<l>            insert_obj(Object, ObjectSelected, Object, OI)</l>
<l>        endif</l>
<l>    endfor</l>
<c>    </c>
<l>    count_obj(Object, NO)</l>
<l>    if(NO != 0)</l>
<l>        union1(Object, Object)</l>
<l>        reduce_domain(a, Object, a1)</l>
<l>        reduce_domain(b, Object, b1)</l>
<l>        kmeancluster (a1, b1, Resultk, GridSize, RadiusS, RadiusK, Silhouette)</l>
<l>        count_obj(Resultk, Numberk)</l>
<l>    endif</l>
<l>   * Numberk := 9999</l>
<l>   * tuple_gen_const (99, 20, Newtuple)</l>
<l>  *  gen_circle (Resultk, Newtuple, Newtuple, Newtuple)</l>
<l>*endfor</l>
<l>clear_shape_model(ModelID)</l>
<l>return ()</l>
</body>
<docu id="count_plaque">
<parameters>
<parameter id="Diff"/>
<parameter id="GridSize"/>
<parameter id="Image"/>
<parameter id="Radius"/>
<parameter id="RadiusK"/>
<parameter id="RadiusS"/>
<parameter id="Result"/>
<parameter id="Resultk"/>
<parameter id="Silhouette"/>
</parameters>
</docu>
</procedure>
</hdevelop>
